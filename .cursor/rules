# Cursor IDE Development Guidelines - Worktrees Project

This project follows my personal development principles defined in `.specify/memory/constitution.md` for Ruby CLI development.

## My Technology Choices
- Ruby 3.2+ with dry-cli framework (Ruby First principle)
- RSpec + Aruba for testing (no mocks - use real git repositories)
- lib/ + exe/ structure (Simple Over Clever)
- Focus on clear, maintainable code I can understand in six months

## File Structure
```
lib/worktrees/           # Business logic modules
├── cli.rb              # Main CLI application
├── commands/           # Command classes (dry-cli)
└── git_operations.rb   # Core business logic

exe/worktrees           # CLI entry point
spec/                   # Tests
├── lib/                # Unit tests (RSpec)
└── features/           # Integration tests (Aruba)
```

## My Development Approach

### Test-Driven Development is Fundamental
- Write failing test FIRST (Red-Green-Refactor cycle)
- Make it pass with minimal code (Simple Over Clever)
- Refactor only when tests are green (Write It Like I'll Maintain It)
- Use real git repositories, never mocks (test real behavior)
- Aruba for CLI integration tests, RSpec for unit tests

### What I've Learned to Avoid
- Service layers in CLI tools (unnecessary complexity)
- Auto-initialization on require (causes side effects)
- Global state mutations (pass data explicitly)
- Clever abstractions I won't understand later

### User Experience That Actually Helps
- Clear error messages with actionable guidance
- Consistent exit codes: 0=success, 1=error, 2=validation, 3=precondition
- Support --help, --version, --format json/text on all commands
- Show progress for long operations, handle Ctrl+C gracefully

## What I Learned from the Bash Attempt
This project started in bash but I discovered service layers don't belong in CLI tools. Ruby gives me:
- Natural module system (no source conflicts)
- Explicit initialization (no auto-magic side effects)
- Clear testing boundaries with RSpec and Aruba
- Code I can actually maintain

The bash attempt taught me to Start Simple and choose tools that make me productive rather than fighting the language.

---
*Based on Personal Principles v2.0.0*